trigger:
  branches:
    include:
      - main      # Trigger pipeline on changes to the 'main' branch in GitHub

variables:
  # Reference the variable group that contains the required variables
  DB_CONNECTION_STRING: $(DB_CONNECTION_STRING)
  # Add Terraform environment variables for Azure authentication
  ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
  ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  ARM_TENANT_ID: $(ARM_TENANT_ID)

stages:
  - stage: Terraform  # Stage for Terraform-related tasks
    displayName: 'Terraform Stage'
    jobs:
      - job: TerraformJob  # Job for running Terraform
        displayName: 'Terraform Plan and Apply'
        pool:
          vmImage: 'ubuntu-latest'  # Use the latest Ubuntu image for the job
        steps:
        - task: UsePythonVersion@0  # Task to use Python version 3.x
          inputs:
            versionSpec: '3.x'
            addToPath: true
            
        - task: DownloadSecureFile@1  # Download a secure file containing the Terraform service principal credentials
          name: 'TerraformServicePrincipal'
          inputs:
            secureFile: 'terraform_service_principal.json'
        
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
          displayName: 'Install Terraform'
        
        - script: |  # Initialize Terraform
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            terraform init
          displayName: 'Terraform Init'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        
        - script: terraform plan -out=tfplan  # Generate a Terraform execution plan and output to 'tfplan'
          displayName: 'Terraform Plan'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        
        - script: terraform apply -auto-approve tfplan  # Apply the Terraform plan automatically
          displayName: 'Terraform Apply'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        
        - script: |  # Capture output variables from Terraform and set them as pipeline variables
            echo "##vso[task.setvariable variable=resourceGroupName]$(terraform output -raw resource_group_name)"
            echo "##vso[task.setvariable variable=acrName]$(terraform output -raw acr_name)"
            echo "##vso[task.setvariable variable=aksClusterName]$(terraform output -raw aks_cluster_name)"
          displayName: 'Capture Terraform Outputs'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
        
        - task: PublishBuildArtifacts@1  # Publish Terraform outputs as pipeline artifacts
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform'
            ArtifactName: 'TerraformOutputs'
            publishLocation: 'Container'
            
  - stage: BuildAndPushDockerImage  # Stage to build and push Docker images
    displayName: 'Build and Push DockerImage'
    dependsOn: Terraform  # This stage depends on the completion of the Terraform stage
    jobs:
      - job: BuildJob  # Job for building and pushing the Docker image
        displayName: 'Build and Push'
        pool:
          vmImage: 'ubuntu-latest'  # Use the latest Ubuntu image for the job
        steps:
        - task: DownloadPipelineArtifact@2  # Download the Terraform outputs artifact
          inputs:
            buildType: current
            artifactName: 'TerraformOutputs'
            targetPath: '$(System.DefaultWorkingDirectory)/terraform'
        
        - script: |  # Build Docker image, passing the database connection string as a build argument
            docker build --build-arg DB_CONNECTION_STRING=$(DB_CONNECTION_STRING) -t $(acrName).azurecr.io/attendance-microservice:$(Build.BuildId) .
          displayName: 'Docker Build'
        
        - script: |  # Log in to Azure Container Registry (ACR) and push the Docker image
            echo $(DOCKER_PASSWORD) | docker login $(acrName).azurecr.io -u $(DOCKER_USERNAME) --password-stdin
            docker push $(acrName).azurecr.io/attendance-microservice:$(Build.BuildId)
          displayName: 'Docker Push'

  - stage: DeployToAKS  # Stage to deploy the application to AKS (Azure Kubernetes Service)
    displayName: 'Deploy to AKS'
    dependsOn: BuildAndPushDockerImage  # This stage depends on the completion of the Docker image build and push stage
    jobs:
    - job: DeployJob  # Job for deploying to AKS
      displayName: 'Deploy to AKS'
      pool:
        vmImage: 'ubuntu-latest'  # Use the latest Ubuntu image for the job
      steps:
        - task: DownloadPipelineArtifact@2  # Download the Terraform outputs artifact
          inputs:
            buildType: current
            artifactName: 'TerraformOutputs'
            targetPath: '$(System.DefaultWorkingDirectory)/terraform'
        
        - script: |  # Authenticate with AKS (Azure Kubernetes Service) using the credentials from Terraform
            az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName)
          displayName: 'Get AKS Credentials'
        
        - script: |  # Create a ConfigMap in Kubernetes to store the database connection string
            kubectl create configmap app-config --from-literal=DB_CONNECTION_STRING=$(DB_CONNECTION_STRING) --dry-run=client -o yaml | kubectl apply -f -
          displayName: 'Create ConfigMap for DB Connection String'

        - script: |  # Deploy the application to Kubernetes using the deployment and service YAML files
            kubectl apply -f kubernetes/deployment.yml
            kubectl apply -f kubernetes/service.yml
          displayName: 'Deploy to Kubernetes'
